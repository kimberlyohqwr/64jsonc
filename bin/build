#!/usr/bin/env node
const path = require('path');
const axios = require('axios');
const fs = require('fs-extra');
const moment = require('moment');
const ejs = require('ejs');
const { endpoint } = require('@octokit/endpoint');

const rootDir = path.resolve(__dirname, '..');
const srcDir = path.join(rootDir, 'src');
const publicDir = path.join(rootDir, 'public');
const buildDir = path.join(rootDir, 'build');

const templateEjs = fs.readFileSync(path.join(srcDir, 'template.ejs'), 'utf8');
const template = ejs.compile(uglify(templateEjs), {});

function formatDate(string) {
  return moment(string).format('LL');
}

function uglify(string) {
  return string
    .replace(/\n/g, '')
    .replace(/\s{2,}/g, ' ');
}

async function formatMarkdown(string) {
  const { body, ...requestOptions } = endpoint('POST /markdown', {
    headers: {
      authorization: `token ${process.env.ACCESS_TOKEN}`,
    },
    text: string,
    mode: 'gfm',
    context: 'parkjs814/parkjs814.github.io',
  });
  const { data } = await axios({ ...requestOptions, data: body });
  return data;
}

async function build() {
  fs.removeSync(buildDir);
  fs.copySync(publicDir, buildDir);

  const categories = ['retrospective', 'technical'];
  const posts = {};
  for (const category of categories) {
    const requestOptions = endpoint('GET /repos/:owner/:repo/issues', {
      headers: {
        authorization: `token ${process.env.ACCESS_TOKEN}`,
      },
      owner: 'parkjs814',
      repo: 'parkjs814.github.io',
      state: 'closed',
      creator: 'parkjs814',
      labels: category,
    });
    const { data: issues } = await axios(requestOptions);

    posts[category] = await Promise.all(issues.map(async issue => {
      const { title, html_url } = issue;
      const body = await formatMarkdown(issue.body);
      const created_at = formatDate(issue.created_at);
      const id = title.toLowerCase().replace(/\W+/g, '-');
      return {
        title,
        html_url,
        body,
        created_at,
        id,
      };
    }));

    const categoryDir = path.join(buildDir, category);
    fs.mkdirSync(categoryDir);

    for (const post of posts[category]) {
      const contentHtml = template({
        page: 'post',
        title: post.title,
        post,
      });
      const postDir = path.join(categoryDir, post.id);
      fs.mkdirSync(postDir);
      fs.writeFileSync(path.join(postDir, 'index.html'), contentHtml, 'utf8');
    }
  }

  const indexHtml = template({
    page: 'main',
    title: 'Jinseo Park',
    categories,
    posts,
  });
  fs.writeFileSync(path.join(buildDir, 'index.html'), indexHtml, 'utf8');
}

build().catch(console.error);
